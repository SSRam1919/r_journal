// app/src/main/java/com/baverika/r_journal/MainActivity.kt

package com.baverika.r_journal

import com.baverika.r_journal.data.local.entity.QuickNote
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import androidx.room.Room
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import com.baverika.r_journal.data.local.database.JournalDatabase
import com.baverika.r_journal.data.local.entity.JournalEntry
import com.baverika.r_journal.data.local.dao.JournalDao
import com.baverika.r_journal.data.local.dao.QuickNoteDao
import com.baverika.r_journal.repository.JournalRepository
import com.baverika.r_journal.repository.QuickNoteRepository
import com.baverika.r_journal.ui.screens.Screen
import com.baverika.r_journal.ui.screens.ChatInputScreen
import com.baverika.r_journal.ui.screens.QuickNotesScreen
import com.baverika.r_journal.ui.screens.SearchScreen
import com.baverika.r_journal.ui.screens.DashboardScreen
import com.baverika.r_journal.ui.screens.ExportScreen
import com.baverika.r_journal.ui.screens.ImportScreen
import com.baverika.r_journal.ui.viewmodel.JournalViewModelFactory
import com.baverika.r_journal.ui.viewmodel.QuickNoteViewModelFactory
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val db = JournalDatabase.getDatabase(this)
        val journalRepo = JournalRepository(db.journalDao())
        val quickNoteRepo = QuickNoteRepository(db.quickNoteDao())

        setContent {
            MaterialTheme {
                MainApp(journalRepo, quickNoteRepo)
            }
        }
    }
}

@Composable
fun MainApp(
    journalRepo: JournalRepository,
    quickNoteRepo: QuickNoteRepository
) {
    val context = LocalContext.current
    var currentScreen by remember { mutableStateOf(Screen.Journal) }
    val drawerState = rememberDrawerState(DrawerValue.Closed)
    val scope = rememberCoroutineScope()

    ModalNavigationDrawer(
        drawerContent = {
            DrawerContent(currentScreen) { screen ->
                currentScreen = screen
                scope.launch { drawerState.close() }
            }
        },
        drawerState = drawerState
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text("r_journal") },
                    navigationIcon = {
                        IconButton(onClick = { scope.launch { drawerState.open() } }) {
                            Icon(Icons.Filled.Menu, contentDescription = "Menu")
                        }
                    }
                )
            },
            content = { padding ->
                Box(modifier = Modifier.padding(padding)) {
                    when (currentScreen) {
                        Screen.Journal -> ChatInputScreen(
                            viewModel = viewModel(factory = JournalViewModelFactory(journalRepo))
                        )
                        Screen.QuickNotes -> QuickNotesScreen(
                            viewModel = viewModel(factory = QuickNoteViewModelFactory(quickNoteRepo))
                        )
                        Screen.Search -> SearchScreen(journalRepo)
                        Screen.Dashboard -> DashboardScreen(journalRepo)
                        Screen.Export -> ExportScreen(journalRepo, quickNoteRepo, context)
                        Screen.Import -> ImportScreen()
                    }
                }
            }
        )
    }
}

@Composable
fun DrawerContent(
    currentScreen: Screen,
    onScreenSelected: (Screen) -> Unit
) {
    Column {
        DrawerItem(
            icon = Icons.Filled.Chat,
            label = "Journal",
            isSelected = currentScreen == Screen.Journal,
            onClick = { onScreenSelected(Screen.Journal) }
        )
        DrawerItem(
            icon = Icons.Filled.Note,
            label = "Quick Notes",
            isSelected = currentScreen == Screen.QuickNotes,
            onClick = { onScreenSelected(Screen.QuickNotes) }
        )
        DrawerItem(
            icon = Icons.Filled.Search,
            label = "Search",
            isSelected = currentScreen == Screen.Search,
            onClick = { onScreenSelected(Screen.Search) }
        )
        DrawerItem(
            icon = Icons.Filled.BarChart,
            label = "Dashboard",
            isSelected = currentScreen == Screen.Dashboard,
            onClick = { onScreenSelected(Screen.Dashboard) }
        )
        DrawerItem(
            icon = Icons.Filled.Upload,
            label = "Export All",
            isSelected = currentScreen == Screen.Export,
            onClick = { onScreenSelected(Screen.Export) }
        )
        DrawerItem(
            icon = Icons.Filled.Download,
            label = "Import",
            isSelected = currentScreen == Screen.Import,
            onClick = { onScreenSelected(Screen.Import) }
        )
    }
}

@Composable
fun DrawerItem(
    icon: ImageVector,
    label: String,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    NavigationDrawerItem(
        icon = { Icon(icon, contentDescription = null) },
        label = { Text(label) },
        selected = isSelected,
        onClick = onClick
    )
}